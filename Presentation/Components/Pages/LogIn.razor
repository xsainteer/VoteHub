@page "/LogIn"
@using Application.Services
@using Domain.DTOs
@inject IUserService UserService
@rendermode InteractiveServer


<h3>LogIn</h3>

<Validations @ref="_validations" Mode="ValidationMode.Auto" Model="_loginUserDto" ValidateOnLoad>
    <Fields Class="d-flex flex-column gap-2">
        @* UserName *@
        <Validation>
            <Field>
                <FieldLabel RequiredIndicator>User Name</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@_loginUserDto.UserName">
                        <Feedback>
                            <ValidationError/>
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>

        @* PASSWORD *@
        <Validation>
            <Field>
                <FieldLabel RequiredIndicator>Password</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@_loginUserDto.Password" Role="@TextRole.Password">
                        <Feedback>
                            <ValidationError/>
                        </Feedback>
                    </TextEdit>
                </FieldBody>
            </Field>
        </Validation>
        
        <Check TValue="bool" bind-Checked="@_loginUserDto.RememberMe">Remember Me</Check>
        
        <Field>
            <Button Type="@ButtonType.Submit" Color="Color.Primary" Loading="_isLoading" Clicked="@LogInUser">Log In</Button>
        </Field>
    </Fields>
</Validations>

@code {
    Validations _validations;
    readonly LogInUserDto _loginUserDto = new();
    bool _isLoading = false;
    
    private async Task LogInUser()
    {
        if (!await _validations.ValidateAll())
            return;
        
        _isLoading = true;
        var result = UserService.LogInAsync(_loginUserDto);
        _isLoading = false;
    }
    
}