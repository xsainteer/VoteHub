@using System.Runtime.InteropServices.JavaScript
@using Application.Services
@using EntityPoll = Domain.Entities.Poll;
@using EntityPollOption = Domain.Entities.PollOption;
@using Blazorise
@using Domain.Entities
@using Infrastructure.Database.Entities
@using Microsoft.AspNetCore.Identity
@using Presentation.Extensions
@inject UserManager<VoteHubUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPollOptionService PollOptionService

<h3>Poll</h3>

<Card>
    <CardHeader>
        <CardTitle>@EntityPoll.Name</CardTitle>
        
        <CardSubtitle>@EntityPoll.Description</CardSubtitle>
        
        <Alert bind-Visible="AlertProperties.IsVisible" Color="AlertProperties.Color">
            <AlertMessage>@AlertProperties.Message</AlertMessage>
        </Alert>
    </CardHeader>

    <Fields>
        @foreach (var option in PollOptions)
        {
            <PollOption Option="@option" OnClick="HandlePollOptionClick"/>
        }
    </Fields>
</Card>

@code {
    [Parameter]
    public EntityPoll EntityPoll { get; set; } = new();
    
    [Parameter]
    private List<EntityPollOption> PollOptions { get; set; } = [];
    
    private VoteHubUser? _currentUser;

    private Vote? UserVote { get; set; }

    AlertProps AlertProperties { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            _currentUser = await UserManager.GetUserAsync(user);
        }
        else
        {
            _currentUser = null;
        }
        
        PollOptions = await PollOptionService.GetPollOptionsByPollIdAsync(EntityPoll.Id);
    }
    
    private async Task HandlePollOptionClick(EntityPollOption option)
    {
        AlertProperties.IsVisible = false;
        
        // checking if the user is authenticated
        if (_currentUser == null)
        {
            AlertProperties.Message = "please login to vote";
            AlertProperties.IsVisible = true;
            return;
        }

        // UserVote being null means the user has not voted yet
        // so we need to create a new vote
        if (UserVote == null)
        {
            UserVote = new Vote
            {
                PollId = EntityPoll.Id,
                UserId = _currentUser.Id,
                PollOptionId = option.Id
            };
            
            
        }

        // checking if the user has already voted for the same option
        //if so return
        if (UserVote.PollOption == option)
            return;
    }
}