@using Application.Services
@using EntityPoll = Domain.Entities.Poll;
@using EntityPollOption = Domain.Entities.PollOption;
@using Blazorise
@using Domain.Entities
@using Infrastructure.Database.Entities
@using Microsoft.AspNetCore.Identity
@using Presentation.Components.Account
@using Presentation.Extensions
@inject UserManager<VoteHubUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPollOptionService PollOptionService
@inject IVoteService VoteService
@inject IdentityUserAccessor UserAccessor

<h3>Poll</h3>

<Card>
    <CardHeader>
        <CardTitle>@EntityPoll.Name</CardTitle>
        
        <CardSubtitle>@EntityPoll.Description</CardSubtitle>
        
        <Alert bind-Visible="AlertProperties.IsVisible" Color="AlertProperties.Color">
            <AlertMessage>@AlertProperties.Message</AlertMessage>
        </Alert>
    </CardHeader>

    <Fields>
        @foreach (var option in EntityPoll.Options)
        {
            <PollOption Option="@option" OnClick="HandlePollOptionClick"/>
        }
    </Fields>
</Card>

@code {
    [Parameter]
    public EntityPoll EntityPoll { get; set; } = new();
    
    [Parameter]
    public VoteHubUser? CurrentUser { get; set; }

    private Vote? UserVote { get; set; }

    AlertProps AlertProperties { get; set; } = new();
    
    
    private async Task HandlePollOptionClick(EntityPollOption option)
    {
        AlertProperties.IsVisible = false;
        
        // checking if the user is authenticated
        if (CurrentUser == null)
        {
            AlertProperties.Message = "please login to vote";
            AlertProperties.IsVisible = true;
            return;
        }
        
        // checking if the user is the owner of the poll
        if (EntityPoll.CreatorId == CurrentUser.Id)
        {
            AlertProperties.Message = "you cannot vote for your own poll";
            AlertProperties.IsVisible = true;
            return;
        }
        
        // trying to get the existing vote of the user if user's null
        UserVote ??= await VoteService.GetVoteByUserIdAndPollIdAsync(CurrentUser.Id, EntityPoll.Id);
        

        // UserVote still being null means the user has not voted yet
        // we need to create a new vote
        if (UserVote == null)
        {
            UserVote = new Vote
            {
                PollId = EntityPoll.Id,
                UserId = CurrentUser.Id,
                PollOptionId = option.Id
            };

            await VoteService.AddVoteAsync(UserVote);
            await VoteService.SaveChangesAsync();

            AlertProperties.Message = "successfully voted";
            AlertProperties.Color = Color.Success;
            AlertProperties.IsVisible = true;
            return;
        }

        // If the user already voted for this option, don't do anything
        if (UserVote.PollOption == option)
            return;
        
        // this piece of code is executed if none of the above conditions are met (meaning the user has already voted and
        // wishes to change their vote, meaning we need to update the vote)

        await VoteService.UpdateVoteAsync(UserVote);
        
        AlertProperties.Message = "successfully updated your vote";
        AlertProperties.Color = Color.Success;
        AlertProperties.IsVisible = true;
        
        await VoteService.SaveChangesAsync();
    }
}