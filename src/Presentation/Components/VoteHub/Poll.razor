@using Application.Services
@using Domain.Entities
@using Infrastructure.Database.Entities
@using Presentation.Extensions
@using Blazorise
@using EntityPoll = Domain.Entities.Poll
@using EntityPollOption = Domain.Entities.PollOption

<Card class="poll-card">
    <CardHeader class="poll-header">
        <CardTitle class="poll-title">@EntityPoll.Name</CardTitle>
        <CardSubtitle class="poll-description">@EntityPoll.Description</CardSubtitle>
        @if (AlertProperties.IsVisible)
        {
            <Alert Color="@AlertProperties.Color" class="poll-alert">
                <i class="fas fa-info-circle me-2"></i>
                @AlertProperties.Message
            </Alert>
        }
    </CardHeader>
    <Fields class="poll-options">
        @foreach (var pollOption in EntityPoll.Options)
        {
            <PollOption Option="@pollOption" OnClick="@(selectedOption => HandlePollOptionClick(selectedOption))" />
        }
    </Fields>
</Card>

@code {
    private const string LoginAlertMessage = "Please login to vote";
    private const string OwnerAlertMessage = "You cannot vote for your own poll";
    private const string VoteSuccessMessage = "Successfully voted";
    private const string UpdateVoteMessage = "Successfully updated your vote";

    [Parameter] public EntityPoll EntityPoll { get; set; } = new();
        [Inject] public IVoteService? VoteService { get; set; }
    [Parameter] public VoteHubUser? CurrentUser { get; set; }
    private Vote? UserVote { get; set; }
    private AlertProps AlertProperties { get; set; } = new();

    private async Task HandlePollOptionClick(EntityPollOption selectedOption)
    {
        Console.WriteLine($"HandlePollOptionClick called for option: {selectedOption.Name}");
        AlertProperties.IsVisible = false;

        if (CurrentUser == null)
        {
            ShowAlert(LoginAlertMessage, Color.Danger);
            return;
        }

        if (EntityPoll.CreatorId == CurrentUser.Id)
        {
            ShowAlert(OwnerAlertMessage, Color.Danger);
            return;
        }

        UserVote ??= await VoteService.GetVoteByUserIdAndPollIdAsync(CurrentUser.Id, EntityPoll.Id);

        if (UserVote == null)
        {
            await CreateNewVote(selectedOption);
            return;
        }

        if (UserVote.PollOptionId == selectedOption.Id)
            return;

        await UpdateExistingVote(selectedOption);
    }

    private async Task CreateNewVote(EntityPollOption option)
    {
        UserVote = new Vote
        {
            PollId = EntityPoll.Id,
            UserId = CurrentUser.Id,
            PollOptionId = option.Id
        };

        await SubmitVoteChanges(VoteSuccessMessage, Color.Success);
    }

    private async Task UpdateExistingVote(EntityPollOption option)
    {
        UserVote.PollOptionId = option.Id;
        await SubmitVoteChanges(UpdateVoteMessage, Color.Success);
    }

    private async Task SubmitVoteChanges(string message, Color alertColor)
    {
        if (VoteService != null)
        {
            await VoteService.SaveChangesAsync();
        }
        ShowAlert(message, alertColor);
    }

    private void ShowAlert(string message, Color color)
    {
        AlertProperties = new AlertProps
        {
            Message = message,
            Color = color,
            IsVisible = true
        };
    }
}