@using Application.Interfaces
@using Application.Services
@using Infrastructure.Database.Entities
@using Microsoft.AspNetCore.Identity
@using EntityPoll = Domain.Entities.Poll

@inject UserManager<VoteHubUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPollService PollService
@inject IPollOptionService PollOptionService


@page "/Polls"
@page "/Polls/{Query}"

<div class="polls-container">
    <h2 class="polls-header mb-4">Available Polls</h2>

    @if (EntityPolls != null && EntityPolls.Any())
    {
        <div class="poll-grid">
            @foreach(var poll in EntityPolls)
            {
                <Poll EntityPoll="poll" CurrentUser="CurrentUser"></Poll>
            }
        </div>
    }
    else
    {
        <div class="no-polls-message">
            <i class="fas fa-clipboard-list"></i>
            <p>No polls available at the moment.</p>
        </div>
    }
</div>



@code {
    [Parameter]
    [SupplyParameterFromQuery] 
    public int Page { get; set; } = 1;
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Query { get; set; }

    private List<EntityPoll>? EntityPolls { get; set; }
    
    private VoteHubUser? CurrentUser { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUser = await UserManager.GetUserAsync(user);
        }
        
        if (Page <= 0) Page = 1;

        EntityPolls = await PollService.GetAllAsync(Page, 10, false, Query);

        foreach (var poll in EntityPolls)
        {
            poll.Options = await PollOptionService.GetPollOptionsByPollIdAsync(poll.Id, true);
        }
    }
}