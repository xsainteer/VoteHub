@using Application.Services
@using Blazorise
@using Blazorise.DataGrid
@using Infrastructure.Database.Entities
@using Microsoft.AspNetCore.Identity
@using Presentation.Extensions
@using EntityPoll = Domain.Entities.Poll
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<VoteHubUser> UserManager
@using EntityPollOption = Domain.Entities.PollOption
@inject IPollService PollService
@inject ILogger<PollCreation> Logger
@rendermode InteractiveServer

@page "/polls/create"

<h3>PollCreation</h3>

<AuthorizeView>
    <Authorized>
        <Fields>
            @* Poll Creation *@
            <Field>
                <FieldLabel>Poll Name</FieldLabel>
                <TextEdit @bind-Text="Poll.Name"></TextEdit>
            </Field>

            <Field>
                <FieldLabel>Poll Description</FieldLabel>
                <TextEdit @bind-Text="Poll.Description" Size="Size.Large"></TextEdit>
            </Field>

            <Field>
                <Switch TValue="bool" @bind-Checked="_showDatePicker"></Switch>

                @if (_showDatePicker)
                {
                    <Tooltip Text="Click me to choose a date!">
                        <DatePicker TValue="DateTime?" @bind-Date="@Poll.ExpiresAt" Placeholder="DD/MM/YYYY"></DatePicker>
                    </Tooltip>
                }
            </Field>

            @* Poll Option Creation *@
            <Fields>
                <Alert Color="AlertProperties.Color" @bind-Visible="AlertProperties.IsVisible">
                    <AlertMessage>@AlertProperties.Message</AlertMessage>
                </Alert>

            
                <DataGrid TItem="EntityPollOption" Data="Poll.Options" PageSize="5" Responsive Editable Filterable>
                    <DataGridColumn Field="@nameof(EntityPollOption.Name)" Caption="Name" Editable />
                    <DataGridColumn Field="@nameof(EntityPollOption.Description)" Caption="Description" Editable />
                    <DataGridCommandColumn />
                </DataGrid>
            </Fields>

            @* Submit Button *@
            <Field>
                <Button Color="Color.Primary" Clicked="HandleSubmit">Create Poll</Button>
            </Field>
        </Fields>
    </Authorized>
    
    <NotAuthorized>
        <p>Please log in in order to create a poll.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public EntityPoll Poll { get; set; } = new();
    
    public AlertProps AlertProperties { get; set; } = new();
    
    public bool _showDatePicker = false;
    
    public VoteHubUser _currentUser = null!;
    
    // getting a user from the authentication state
    protected override async Task OnInitializedAsync()
    {
        try
        {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        _currentUser = await UserManager.GetUserAsync(user) ?? throw new InvalidOperationException("User not found");
        
        }
        catch (Exception e)
        {
            Logger.LogError("Error while getting user from authentication state: {Message}", e.Message);
            throw;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            Poll.CreatorId = _currentUser.Id;
            
            await PollService.AddAsync(Poll);
        }
        catch (Exception e)
        {
            Logger.LogError("Error while creating poll: {Message}", e.Message);;
            throw;
        }
    }
}